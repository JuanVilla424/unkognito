---
# .github/workflows/release-controller.yml

name: Release Controller

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      REPO_NAME: ${{ github.event.repository.name }}
  # set folder repository var \
  #  (settings->security->secrets-variables->actions->variables->repository) \
  #  or set default
      FOLDER_TO_COMPRESS: 'docs'
    steps:
      - name: Checkout repository
        id: checkout_repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.12
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Install dependencies
        id: install_dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install poetry
          poetry lock
          poetry install
      - name: Package Version
        id: package_version
        run: |
          zip -r "${REPO_NAME}-${GITHUB_REF_NAME}.zip" \
            {INSTALL,SECURITY,README,ICONS,CONTRIBUTING,CODE_OF_CONDUCT}.md \
            requirements.txt .github scripts frontend backend \
            pyproject.toml LICENSE
#            "${FOLDER_TO_COMPRESS}"
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          FOLDER_TO_COMPRESS: ${{ env.FOLDER_TO_COMPRESS }}
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ env.REPO_NAME }}-${{ github.ref_name }}.zip"
          asset_name: "${{ env.REPO_NAME }}-${{ github.ref_name }}.zip"
          asset_content_type: application/zip
